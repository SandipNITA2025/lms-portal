generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// COURSE MODEL:
model Course {
  id          String  @id @default(cuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

// CATEGORY MODEL:
model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

// ATTACHMENT MODEL:
model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String   @db.Text
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// CHAPTER MODEL:
model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  muxData     MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// MUXDATA MODEL:
model MuxData {
  id         String @id @default(cuid())
  assestId   String
  playbackId String

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

// USERPROGRESS MODEL:
model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([chapterId, userId])
  @@index([chapterId])
}

// PURCHASE MODEL:
model Purchase {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// STRIPE PAYMENT MODEL:
model StripePayment {
  id               String @id @default(cuid())
  userId           String
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}
